import java.security.MessageDigest
/*
 * Copyright (c) 2020. Plexus, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'com.google.protobuf'
}
apply from: 'translations.gradle'

def canonicalVersionCode = 200
def canonicalVersionName = "2.0.0"

def postFixSize = 2
def abiPostFix = ['universal'   : 0,
                  'armeabi-v7a' : 1,
                  'arm64-v8a'   : 2,
                  'x86'         : 3,
                  'x86_64'      : 4]

def keystores = [ 'debug'  : loadKeystoreProperties('keystore.debug.properties') ]

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.10.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

android {
    buildToolsVersion BUILD_TOOL_VERSION
    compileSdkVersion COMPILE_SDK

    signingConfigs {
        if (keystores.debug != null) {
            debug {
                storeFile file("${project.rootDir}/${keystores.debug.storeFile}")
                storePassword keystores.debug.storePassword
                keyAlias keystores.debug.keyAlias
                keyPassword keystores.debug.keyPassword
            }
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JAVA_VERSION
        targetCompatibility JAVA_VERSION
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }

    flavorDimensions 'distribution', 'environment'

    defaultConfig {
        applicationId "com.plexus"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode canonicalVersionCode * postFixSize
        versionName canonicalVersionName

        buildConfigField "long", "BUILD_TIMESTAMP", getLastCommitTimestamp() + "L"
        buildConfigField "int", "CANONICAL_VERSION_CODE", "$canonicalVersionCode"
        buildConfigField "String", "LOOKOUT_SERVICE_STATUS_URL", "\"firebase.google.com\""
        buildConfigField "String[]", "LANGUAGES", "new String[]{\"" + autoResConfig().collect { s -> s.replace('-r', '_') }.join('", "') + '"}'
        buildConfigField "String", "DEFAULT_CURRENCIES", "\"EUR,AUD,GBP,CAD,CNY\""
        buildConfigField "int[]", "MOBILE_COIN_REGIONS", "new int[]{44}"

        resConfigs autoResConfig()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            if (keystores['debug'] != null) {
                signingConfig signingConfigs.debug
            }
            isDefault true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard/proguard-firebase-messaging.pro',
                    'proguard/proguard-google-play-services.pro',
                    'proguard/proguard-jackson.pro',
                    'proguard/proguard-sqlite.pro',
                    'proguard/proguard-appcompat-v7.pro',
                    'proguard/proguard-square-okhttp.pro',
                    'proguard/proguard-square-okio.pro',
                    'proguard/proguard-glide.pro',
                    'proguard/proguard-retrofit.pro',
                    'proguard/proguard-retrolambda.pro',
                    'proguard/proguard-okhttp.pro'
            testProguardFiles 'proguard/proguard-automation.pro',
                    'proguard/proguard.cfg'
        }
        flipper {
            initWith debug
            isDefault false
            minifyEnabled false
            matchingFallbacks = ['debug']
        }
        release {
            minifyEnabled true
            proguardFiles = buildTypes.debug.proguardFiles
        }
        perf {
            initWith debug
            isDefault false
            debuggable false
            matchingFallbacks = ['debug']
        }
        mock {
            initWith debug
            isDefault false
            minifyEnabled false
            matchingFallbacks = ['debug']
        }
    }

    productFlavors {
        play {
            dimension 'distribution'
            isDefault true
            ext.websiteUpdateUrl = "null"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "false"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "$ext.websiteUpdateUrl"
        }

        website {
            dimension 'distribution'
            ext.websiteUpdateUrl = "https://updates.plexus.dev/android"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "true"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "\"$ext.websiteUpdateUrl\""
        }

        internal {
            dimension 'distribution'
            ext.websiteUpdateUrl = "null"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "false"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "$ext.websiteUpdateUrl"
        }

        prod {
            dimension 'environment'

            isDefault true
        }

        staging {
            dimension 'environment'

            applicationIdSuffix ".staging"

            buildConfigField "String", "MOBILE_COIN_ENVIRONMENT", "\"testnet\""
        }

    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFileName = output.outputFileName.replace(".apk", "-${variant.versionName}.apk")
            def abiName = output.getFilter("ABI") ?: 'universal'
            def postFix = abiPostFix.get(abiName, 0)

            if (postFix >= postFixSize) throw new AssertionError("postFix is too large")

            output.versionCodeOverride = canonicalVersionCode * postFixSize + postFix
        }
    }

    android.variantFilter { variant ->
        def distribution = variant.getFlavors().get(0).name
        def buildType    = variant.buildType.name

        if (distribution == 'study' && buildType != 'perf' && buildType != 'mock') {
            variant.setIgnore(true)
        } else if (distribution != 'study' && buildType == 'mock') {
            variant.setIgnore(true)
        }
    }

    lintOptions {
        abortOnError true
        baseline file("lint-baseline.xml")
        disable "LintError"
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    //Android Dependencies
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    //noinspection GradleCompatible
    implementation 'com.android.support:customtabs:28.0.0'
    //noinspection GradleCompatible
    implementation 'com.android.support:support-dynamic-animation:28.0.0'
    implementation "androidx.camera:camera-core:1.1.0-alpha03"
    implementation "androidx.camera:camera-camera2:1.1.0-alpha03"
    implementation "androidx.camera:camera-lifecycle:1.1.0-alpha03"
    implementation "androidx.camera:camera-view:1.0.0-alpha23"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.3.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.biometric:biometric:1.1.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation('androidx.security:security-crypto:1.1.0-alpha03')
    implementation 'androidx.navigation:navigation-fragment:2.3.5'
    implementation 'androidx.navigation:navigation-ui:2.3.5'
    //noinspection GradleCompatible
    implementation 'com.android.support:palette-v7:28.0.0'
    implementation 'com.android.volley:volley:1.2.0'
    implementation 'androidx.browser:browser:1.3.0'
    implementation 'androidx.webkit:webkit:1.4.0'
    implementation "net.zetetic:android-database-sqlcipher:4.4.2"
    implementation 'org.greenrobot:eventbus:3.2.0'

    //Google Dependencies
    implementation 'com.google.firebase:firebase-auth:20.0.4'
    implementation 'com.google.firebase:firebase-database:19.7.0'
    implementation 'com.google.firebase:firebase-storage:19.2.2'
    implementation 'com.google.firebase:firebase-messaging:21.1.0'
    implementation 'com.google.firebase:firebase-firestore:22.1.2'
    implementation 'com.google.firebase:firebase-core:18.0.3'
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-ads:19.8.0'
    implementation 'com.google.android.material:material:1.4.0-alpha02'
    implementation 'com.google.android.exoplayer:exoplayer-core:2.9.1'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.9.1'
    implementation 'com.google.android.exoplayer:extension-mediasession:2.9.1'
    implementation 'com.google.zxing:core:3.3.3'
    implementation 'com.google.zxing:android-integration:3.1.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.googlecode.mp4parser:isoparser:1.1.22'

    //Facebook Dependencies
    implementation 'com.facebook.fresco:fresco:2.3.0'
    implementation 'com.facebook.shimmer:shimmer:0.5.0'

    //Github Dependencies
    implementation 'com.github.shts:StoriesProgressView:3.0.0'
    implementation 'com.github.curioustechizen.android-ago:library:1.4.0'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'com.github.tntkhang:gmail-sender-library:1.3.0'

    //Apache Dependencies
    implementation 'org.apache.httpcomponents:httpcore:4.4.14'
    implementation 'org.apache.httpcomponents:httpmime:4.5.13'
    implementation 'org.apache.commons:commons-lang3:3.11'

    //Other Dependencies
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'com.theartofdev.edmodo:android-image-cropper:2.8.0'
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'com.annimon:stream:1.2.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    //noinspection GradleCompatible
    implementation 'io.reactivex.rxjava2:rxjava:2.2.13'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.4'
    implementation 'com.jakewharton.rxbinding4:rxbinding-material:4.0.0'
    implementation 'com.vanniktech:emoji-twitter:0.7.0'
    implementation 'com.airbnb.android:lottie:3.6.1'
    implementation 'commons-io:commons-io:20030203.000550'
    implementation 'org.osmdroid:osmdroid-android:6.1.10'
    implementation (
            [group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.4.1'],
            [group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.4.1'],
            [group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.4.1']
    )

    implementation project(':core-utils')
    implementation project(':paging')
    implementation project(':video')

    //Test Libraries
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

def assembleWebsiteDescriptor = { variant, file ->
    if (file.exists()) {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        file.eachByte 4096, {bytes, size ->
            md.update(bytes, 0, size);
        }

        String digest  = md.digest().collect {String.format "%02x", it}.join();
        String url     = variant.productFlavors.get(0).ext.websiteUpdateUrl
        String apkName = file.getName()

        String descriptor = "{" +
                "\"versionCode\" : ${canonicalVersionCode * postFixSize + abiPostFix['universal']}," +
                "\"versionName\" : \"$canonicalVersionName\"," +
                "\"sha256sum\" : \"$digest\"," +
                "\"url\" : \"$url/$apkName\"" +
                "}"

        File descriptorFile = new File(file.getParent(), apkName.replace(".apk", ".json"))

        descriptorFile.write(descriptor)
    }
}

def signProductionRelease = { variant ->
    variant.outputs.collect { output ->
        String apkName    = output.outputFile.name
        File   inputFile  = new File(output.outputFile.path)
        File   outputFile = new File(output.outputFile.parent, apkName.replace('-unsigned', ''))

        inputFile.delete()
        outputFile
    }
}

task signProductionPlayRelease {
    doLast {
        signProductionRelease(android.applicationVariants.find { (it.name == 'playProdRelease') })
    }
}

task signProductionInternalRelease {
    doLast {
        signProductionRelease(android.applicationVariants.find { (it.name == 'internalProdRelease') })
    }
}

task signProductionWebsiteRelease {
    doLast {
        def  variant       = android.applicationVariants.find { (it.name == 'websiteProdRelease') }
        File signedRelease = signProductionRelease(variant).find { it.name.contains('universal') }
        assembleWebsiteDescriptor(variant, signedRelease)
    }
}

def getLastCommitTimestamp() {
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'git'
            args = ['log', '-1', '--pretty=format:%ct']
            standardOutput = os
        }

        return os.toString() + "000"
    }
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def loadKeystoreProperties(filename) {
    def keystorePropertiesFile = file("${project.rootDir}/${filename}")
    if (keystorePropertiesFile.exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        return keystoreProperties;
    } else {
        return null;
    }
}
